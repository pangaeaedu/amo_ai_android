Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def want_replace_id = properties.getProperty('want.reset.package.name')
def versionCodeStr = properties.getProperty('version.code.str')
def versionNameStr = properties.getProperty('version.name.str')
def isOpenDebug = properties.getProperty('isOpenDebug')
boolean isApfDebuggable = false;
if (isOpenDebug != null && isOpenDebug.toBoolean()) {
    isApfDebuggable = isOpenDebug.toBoolean();
}
println ' ----------------------------isApfDebuggable---------------------------------------------- is ' + isApfDebuggable

def isUseFixRtl = properties.getProperty('isUseFixRtl')
boolean isApfFixRtl = false
if (isUseFixRtl != null && isUseFixRtl.toBoolean()) {
    isApfFixRtl = isUseFixRtl.toBoolean()
}
println ' ----------------------------isApfFixRtl---------------------------------------------- is ' + isApfFixRtl


//def over21sdk = false
//if (rootProject.minSdkVersion.toInteger() >= 21.intValue()) {
//    over21sdk = true
//}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.zen.gradle.tools'
apply plugin: 'com.zen.lib.analysis'
apply plugin: 'com.nd.apf.tool'
apply plugin: 'xst-network'
apply plugin: 'com.zen.gradle.tools'
apply plugin: 'dynamic-access-network'
apply plugin: 'com.sensorsdata.analytics.android'
apply plugin: 'com.sensorsdata.analytics.android'

//if(!over21sdk) {
//    apply plugin: 'dexfix';
//}

//构建环境
//严格模式相关
def strictMode = properties.getProperty('strictModel');
def open_strictmode_CleartextNetwork = properties.getProperty('strictMode.open_strictmode_CleartextNetwork');
def open_strictmode_ActivityLeaks = properties.getProperty('strictMode.open_strictmode_ActivityLeaks');
def open_strictmode_penaltyFlashScreen = properties.getProperty('strictMode.open_strictmode_penaltyFlashScreen');
def open_strictmode_penaltyDropBox = properties.getProperty('strictMode.open_strictmode_penaltyDropBox');
def open_strictmode_LeakedSqlLiteObjects = properties.getProperty('strictMode.open_strictmode_LeakedSqlLiteObjects');
def open_strictmode_network = properties.getProperty('strictMode.open_strictmode_network');
def open_strictmode_LeakedClosableObjects = properties.getProperty('strictMode.open_strictmode_LeakedClosableObjects');
def open_strictmode_ResourceMismatches = properties.getProperty('strictMode.open_strictmode_ResourceMismatches');
def open_strictmode_CustomSlowCalls = properties.getProperty('strictMode.open_strictmode_CustomSlowCalls');
def open_strictmode_FileUriExposure = properties.getProperty('strictMode.open_strictmode_FileUriExposure');
def open_strictmode_disk_write = properties.getProperty('strictMode.open_strictmode_disk_write');
def open_strictmode_penaltyDialog = properties.getProperty('strictMode.open_strictmode_penaltyDialog');
def open_strictmode_LeakedRegistrationObjects = properties.getProperty('strictMode.open_strictmode_LeakedRegistrationObjects');
def open_strictmode_disk_read = properties.getProperty('strictMode.open_strictmode_disk_read');
def open_strictmode_ContentUriWithoutPermission = properties.getProperty('strictMode.open_strictmode_ContentUriWithoutPermission');
def open_strictmode_detectNonSdkApiUsage = properties.getProperty('strictMode.open_strictmode_detectNonSdkApiUsage')

def isOpenBundle = String.valueOf(rootProject.isBundleEnabled);

String[] arrStrictMode = [isOpenBundle, strictMode, open_strictmode_CleartextNetwork, open_strictmode_ActivityLeaks, open_strictmode_penaltyFlashScreen,
                          open_strictmode_penaltyDropBox, open_strictmode_LeakedSqlLiteObjects, open_strictmode_network,
                          open_strictmode_LeakedClosableObjects, open_strictmode_ResourceMismatches, open_strictmode_CustomSlowCalls,
                          open_strictmode_FileUriExposure, open_strictmode_disk_write, open_strictmode_penaltyDialog,
                          open_strictmode_LeakedRegistrationObjects, open_strictmode_disk_read, open_strictmode_ContentUriWithoutPermission,
                          open_strictmode_detectNonSdkApiUsage]

int size_arrStrictMode = arrStrictMode.length;
for (int i = 0; i < size_arrStrictMode; ++i) {
    if (arrStrictMode[i] != null && arrStrictMode[i].toString().trim().equals("true")) {
        arrStrictMode[i] = "true";
    } else {
        arrStrictMode[i] = "false";
    }
}
println ' ------strictMode local.propertier value------- is ' + strictMode

android {
    println ' the want.reset.package.name value is ' + want_replace_id
    println ' the want reset versionCode value is ' + versionCodeStr
    println ' the want reset versionName value is ' + versionNameStr
//    println ' ------current versionMinSdk------- is ' + rootProject.minSdkVersion + '-------targetSdkVersion is ' + rootProject.targetSdkVersion + "-------over21sdk is " + over21sdk
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    // dexOptions 配置已经过时，并且在 Android Gradle 插件的 8.0 版本中将被移除。在现有的 Android Gradle 插件版本中，使用 dexOptions 配置没有任何效果，因为 Android Gradle 插件会自动优化 Dex（Dalvik Executable）操作。
    // 所以这里可以删除
//    dexOptions {
//        //配置是否预执行dex libraries 库工程，开启后可以提高增量构建速度
//        //默认是是开启的，但是，当使用dx的--multi-dex选项生成多个dex,
//        //会导致和库工程冲突，应关闭
//        preDexLibraries = false
//        // WARNING:DSL element 'DexOptions.incremental' is obsolete and will be removed at the end of 2018.
//        // incremental true意味着Gradle将使用以前的Dex文件并将新的更改附加到它们(而不是每次都重新构建它们),已弃用
//        //incremental true
//        // 配置最大堆内存
//        javaMaxHeapSize "8g"
//        //如果需要生成一个最小的主包 可以启用这一行    build tools 24生成的主包是最小状态
//        //additionalParameters += '--minimal-main-dex'
//        //如果去掉annotation 必须开启imapp_fix进行插桩
//        //把所有带有运行时注解的类保留在主dex中，默认开启，这里关闭
//        //keepRuntimeAnnotatedClasses false
//
//    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'org/apache/commons/codec/language/bm/*.txt'
        exclude 'META-INF/com.nd.sdp.android.support.kotlin_module'
    }
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion


    signingConfigs {
    }

    defaultConfig {
        applicationId want_replace_id.toString()
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionCodeStr.toInteger()
        versionName versionNameStr.toString()
        multiDexEnabled true
        def scheme = "";
        task getScheme {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < applicationId.length(); ++i) {
                char c = applicationId.charAt(i);
                if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
                    sb.append(c);
                }
            }
            scheme = sb.toString();
        }

        if (rootProject.isComponentTest) {
            // 功能测试和集成测试下 ，友盟渠道名CHANNEL_NAME 设置为 default
            manifestPlaceholders = [CHANNEL_NAME: "default", _scheme: scheme]
        } else {
            manifestPlaceholders = [_scheme: scheme]
        }

//        javaCompileOptions {
//            // 显式声明支持注解
//            annotationProcessorOptions {
//                includeCompileClasspath false
//            }
//        }


        //testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    buildTypes {
        debug {
            println("-------buildTypes-------debug-------------debuggable =true-------");
            debuggable true
            //关闭混淆
            minifyEnabled false
            // 禁止使用 PNG crunching
            crunchPngs false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-custom.pro'
            buildConfigField("Boolean", "ANDROID_APP_BUNDLES", isOpenBundle)
            buildConfigField("Boolean", "StrictMode", strictMode)
            buildConfigField("Boolean", "StrictMode_CleartextNetwork", open_strictmode_CleartextNetwork)
            buildConfigField("Boolean", "StrictMode_ActivityLeaks", open_strictmode_ActivityLeaks)
            buildConfigField("Boolean", "StrictMode_PenaltyFlashScreen", open_strictmode_penaltyFlashScreen)
            buildConfigField("Boolean", "StrictMode_PenaltyDropBox", open_strictmode_penaltyDropBox)
            buildConfigField("Boolean", "StrictMode_LeakedSqlLiteObjects", open_strictmode_LeakedSqlLiteObjects)
            buildConfigField("Boolean", "StrictMode_Network", open_strictmode_network)
            buildConfigField("Boolean", "StrictMode_LeakedClosableObjects", open_strictmode_LeakedClosableObjects)
            buildConfigField("Boolean", "StrictMode_ResourceMismatches", open_strictmode_ResourceMismatches)
            buildConfigField("Boolean", "StrictMode_CustomSlowCalls", open_strictmode_CustomSlowCalls)
            buildConfigField("Boolean", "StrictMode_FileUriExposure", open_strictmode_FileUriExposure)
            buildConfigField("Boolean", "StrictMode_DiskWrite", open_strictmode_disk_write)
            buildConfigField("Boolean", "StrictMode_PenaltyDialog", open_strictmode_penaltyDialog)
            buildConfigField("Boolean", "StrictMode_LeakedRegistrationObjects", open_strictmode_LeakedRegistrationObjects)
            buildConfigField("Boolean", "StrictMode_DiskRead", open_strictmode_disk_read)
            buildConfigField("Boolean", "StrictMode_ContentUriWithoutPermission", open_strictmode_ContentUriWithoutPermission)
            buildConfigField("Boolean", "StrictMode_DetectNonSdkApiUsage", open_strictmode_detectNonSdkApiUsage)

            def GRADLE_PROPERTIES_JSON = '{'
            project.properties.each {
                if (it.key.toLowerCase().startsWith("gradle_property")) {
                    if (it.value.toString().equalsIgnoreCase("true") || it.value.toString().equalsIgnoreCase("false")) {
                        GRADLE_PROPERTIES_JSON += "\\\"" + it.key + "\\\"" + ":" + it.value
                    } else {
                        GRADLE_PROPERTIES_JSON += "\\\"" + it.key + "\\\"" + ":" + "\\\"${it.value}\\\""
                    }
                    GRADLE_PROPERTIES_JSON += ","
                }
            }
            if (GRADLE_PROPERTIES_JSON.endsWith(",")) {
                GRADLE_PROPERTIES_JSON = GRADLE_PROPERTIES_JSON.substring(0, GRADLE_PROPERTIES_JSON.length() - 1)
            }
            GRADLE_PROPERTIES_JSON += "}"
            GRADLE_PROPERTIES_JSON = new String(GRADLE_PROPERTIES_JSON.getBytes("iso8859-1"), "UTF-8")
            println("GRADLE_PROPERTIES_JSON = " + GRADLE_PROPERTIES_JSON)
            buildConfigField("String", "GRADLE_PROPERTIES", "\"" + GRADLE_PROPERTIES_JSON + "\"")
        }
        release {
            println("--------buildTypes------release--------------------isApfDebuggable " + isApfDebuggable);
            //if(!isPostprocessing) {
            //关闭混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-custom.pro'
            //}
            //不知道为啥 直接设置有问题
            if (isApfDebuggable) {
                println("--------buildTypes------release-----------isApfDebuggable-- set-------debuggable true");
                debuggable true
            }
            buildConfigField("Boolean", "ANDROID_APP_BUNDLES", isOpenBundle)
            buildConfigField("Boolean", "StrictMode", strictMode)
            buildConfigField("Boolean", "StrictMode_CleartextNetwork", open_strictmode_CleartextNetwork)
            buildConfigField("Boolean", "StrictMode_ActivityLeaks", open_strictmode_ActivityLeaks)
            buildConfigField("Boolean", "StrictMode_PenaltyFlashScreen", open_strictmode_penaltyFlashScreen)
            buildConfigField("Boolean", "StrictMode_PenaltyDropBox", open_strictmode_penaltyDropBox)
            buildConfigField("Boolean", "StrictMode_LeakedSqlLiteObjects", open_strictmode_LeakedSqlLiteObjects)
            buildConfigField("Boolean", "StrictMode_Network", open_strictmode_network)
            buildConfigField("Boolean", "StrictMode_LeakedClosableObjects", open_strictmode_LeakedClosableObjects)
            buildConfigField("Boolean", "StrictMode_ResourceMismatches", open_strictmode_ResourceMismatches)
            buildConfigField("Boolean", "StrictMode_CustomSlowCalls", open_strictmode_CustomSlowCalls)
            buildConfigField("Boolean", "StrictMode_FileUriExposure", open_strictmode_FileUriExposure)
            buildConfigField("Boolean", "StrictMode_DiskWrite", open_strictmode_disk_write)
            buildConfigField("Boolean", "StrictMode_PenaltyDialog", open_strictmode_penaltyDialog)
            buildConfigField("Boolean", "StrictMode_LeakedRegistrationObjects", open_strictmode_LeakedRegistrationObjects)
            buildConfigField("Boolean", "StrictMode_DiskRead", open_strictmode_disk_read)
            buildConfigField("Boolean", "StrictMode_ContentUriWithoutPermission", open_strictmode_ContentUriWithoutPermission)
            buildConfigField("Boolean", "StrictMode_DetectNonSdkApiUsage", open_strictmode_detectNonSdkApiUsage)

            def GRADLE_PROPERTIES_JSON = '{'
            project.properties.each {
                if (it.key.toLowerCase().startsWith("gradle_property")) {
                    if (it.value.toString().equalsIgnoreCase("true") || it.value.toString().equalsIgnoreCase("false")) {
                        GRADLE_PROPERTIES_JSON += "\\\"" + it.key + "\\\"" + ":" + it.value
                    } else {
                        GRADLE_PROPERTIES_JSON += "\\\"" + it.key + "\\\"" + ":" + "\\\"${it.value}\\\""
                    }
                    GRADLE_PROPERTIES_JSON += ","
                }
            }
            if (GRADLE_PROPERTIES_JSON.endsWith(",")) {
                GRADLE_PROPERTIES_JSON = GRADLE_PROPERTIES_JSON.substring(0, GRADLE_PROPERTIES_JSON.length() - 1)
            }
            GRADLE_PROPERTIES_JSON += "}"
            GRADLE_PROPERTIES_JSON = new String(GRADLE_PROPERTIES_JSON.getBytes("iso8859-1"), "UTF-8")
            println("GRADLE_PROPERTIES_JSON = " + GRADLE_PROPERTIES_JSON)
            buildConfigField("String", "GRADLE_PROPERTIES", "\"" + GRADLE_PROPERTIES_JSON + "\"")
        }
    }

    // Specifies dynamic feature modules that have a dependency on this base module.
    // dynamicFeatures = [] 占位符声明只允许在同一行，CI会整行替换真实的数据
    //wantReplace_dynamicFeatures = []
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}



				Configuration compileConf = project.configurations.getByName(JavaPlugin.IMPLEMENTATION_CONFIGURATION_NAME)
				def ndPluginConfiguration = project.configurations.create("ndPlugin")
						.setTransitive(true)
						.setVisible(true)
						.setDescription("Plugin")
				compileConf.extendsFrom(ndPluginConfiguration)
			


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //minSdkVersion 为 21 或更高的值，则默认情况下会启用 MultiDex，并且您不需要 MultiDex 支持库
    //implementation 'com.android.support:multidex:1.0.1'
    implementation('org.jetbrains.kotlin:kotlin-stdlib:1.5.20') {
        transitive = true
        changing = true
    }
    implementation('com.nd.sdp.android:processcheck:1.0.1@aar') {
        transitive = true
        changing = true
    }
    implementation('androidx.appcompat:appcompat:1.0.0@aar') {
        transitive = true
        changing = true
    }
    implementation('com.nd.sdp.uc:nduc_agreement:3.0.3-release.1') {
        transitive = true
        changing = true
    }
    implementation('com.nd.android.smartcan:smartcan-appfactory:3.3.2.0.0.smartcan.release@aar') {
        transitive = true
        changing = true
        exclude group: 'android.support', module: 'android-support-v4'
    }

    implementation('com.nd.sdp.android:apf-assemble:3.0.0.8.release@aar') {
        transitive = true
        changing = true
        exclude group: 'android.support', module: 'android-support-v4'
    }

    implementation('com.nd.uc:thirdlogin:1.0.0.9') {
        transitive = true
        changing = true
        exclude group: 'android.support', module: 'android-support-v4'
    }

//    //不包含react，就不要把我加入
//    if (react == null || !react.equals('true')){
//        println("-------not contain react---------------------------");
//        configurations {
//            all*.exclude group:'com.nd.sdp.android', module: 'react-wrapper'
//        }
//    }
    implementation('com.nd.sdp.apf:utils-new:1.1.0-newmock@aar') {
        transitive = true
        changing = true        
    }
    implementation 'com.google.android.play:core:1.5.0'
}

ext {
    globalApplicationId = android.defaultConfig.applicationId
}

def hasAppFactory = file('app-factory-component.gradle').exists()
if (hasAppFactory) {
    apply from: 'app-factory-component.gradle'
}

// 在应用中,并且不是bundle构建
//if (!isComponentTest && !rootProject.isBundleEnabled) {
if (!rootProject.isComponentTest) {
    //目的是为了多渠道打包。
    android {
        // 多渠道打包必须声明 flavorDimendions
        flavorDimensions "default"
    }
    def hasProduct = file('app-factory-product.gradle').exists()
    if (hasProduct) {
        apply from: 'app-factory-product.gradle'
    }
}

////显示所有的依赖 4.1 不支持<<
//task showAllDependencies(dependsOn: configurations.compile) << {
//    println "classpath = ${configurations.compile.collect {File file -> file.name}}"
//}


def getScreenOrientation() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('android_dic.properties').newDataInputStream())
    def screenOrientation = properties.getProperty('screenOrientation')
    println("--android_dic.properties-----screenOrientation--------- " + screenOrientation)
    if (screenOrientation != null) {
        screenOrientation = screenOrientation.trim()
    }

    return screenOrientation
}

def getfilterActivity() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('android_dic.properties').newDataInputStream())
    def filterActivity = properties.getProperty('filterActivity')
    println("--android_dic.properties-----filterActivity--------- " + filterActivity)
    if (filterActivity != null && filterActivity.trim().length() > 0) {
        List<String> wantChange = new ArrayList<>()
        String[] activitys = filterActivity.split(";")
        if (activitys != null && activitys.length > 0) {
            wantChange.addAll(activitys)
            return wantChange;
        }

    }
    return null
}
/**
 * 处理横竖屏。
 */
def dealWithdic(String content, String screenOrientation, List<String> wantChange) {

    if (screenOrientation == null || screenOrientation.trim().length() == 0) {
        println "要替换的---screenOrientation---没有设置or为空，不做任何替换---"
        return content
    }

    if (wantChange == null || wantChange.size() == 0) {
        println "要替换的---白名单列表---为空，不做任何替换---"
        return content
    } else {
        println "要替换的---白名单列表---为空，长度是" + wantChange.size();
        for (String element : wantChange) {
            println "要替换的---白名单列表---是" + element
        }
    }

    StringBuffer dataBuffer = new StringBuffer();
    String[] lines = content.split(System.lineSeparator())
    boolean find = false
    String temp = null

    println "要替换的---清单文件split以后长度是" + lines.length
    for (int i = 0; i < lines.length; i++) {

        try {
            temp = lines[i]
            if (temp == null || temp.trim().length() == 0) {
                continue
            }
            if (find) {
                if (temp.contains("android:screenOrientation")) {
                    println("发现一个要替换的---------android:screenOrientation---------配置（工厂提供）")
                    println(temp)
                    if (temp.contains("android:screenOrientation=\"unspecified\"")) {
                        temp = temp.replace("android:screenOrientation=\"unspecified\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"behind\"")) {
                        temp = temp.replace("android:screenOrientation=\"behind\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"landscape\"")) {
                        temp = temp.replace("android:screenOrientation=\"landscape\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"portrait\"")) {
                        temp = temp.replace("android:screenOrientation=\"portrait\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"reverseLandscape\"")) {
                        temp = temp.replace("android:screenOrientation=\"reverseLandscape\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"reversePortrait\"")) {
                        temp = temp.replace("android:screenOrientation=\"reversePortrait\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"sensor\"")) {
                        temp = temp.replace("android:screenOrientation=\"sensor\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"fullSensor\"")) {
                        temp = temp.replace("android:screenOrientation=\"fullSensor\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"nosensor\"")) {
                        temp = temp.replace("android:screenOrientation=\"nosensor\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    } else if (temp.contains("android:screenOrientation=\"user\"")) {
                        temp = temp.replace("android:screenOrientation=\"user\"", "android:screenOrientation=\"" + screenOrientation + "\"")
                    }
                } else {
                    //println(temp)
                }
            }

            //查找到开始要替换的界面
            for (String key : wantChange) {
                if (temp.contains(key)) {
                    find = true
                    println("发现一个匹配的 " + lines[i])
                    break
                }
            }

            //这个界面Activity 替换结束位置。
            if (temp.contains(">")) {
                find = false
            }

        } catch (Exception e) {
            println("替换的---------android:screenOrientation----过程发现异常 " + e.printStackTrace())
            e.printStackTrace()
        }

        dataBuffer.append(temp + System.lineSeparator())
    }
    return dataBuffer.toString()
}


                // tree.txt -> assets 工厂构建过程需要
                task apfCopyDependsLibReport(type: Copy) {
                    from "${buildDir}/reports/zen/analysis/library/compile/Tree.txt"
                    into 'assets'
                }
                // 建立task关联，libReport -> copyReport -> preBuild
                afterEvaluate {
                    def keyWord = "ReleaseCompileClasspath"
                    def compileTask = this.tasks.find { it.name.endsWith(keyWord) }
                    if (compileTask) {
                        preBuild.dependsOn apfCopyDependsLibReport
                        apfCopyDependsLibReport.dependsOn compileTask
                    } else {
                        println("ERROR: Not found task which contains ${keyWord}.")
                    }
                }
            

                    //rootProject.isComponentTest是模板工程的定义的变量，true 表示是功能或集成测试，false表示应用
					apfPluginTool{
						dest = "应用工厂类方法扫描插件"
						enableScanRef = rootProject.isComponentTest
                        enableSearchDevTool = rootProject.isComponentTest
						debugScanRef = false
                        debugSearchDevTool = false
						openPrintNoScan = false
						openPrintScan = false
						excludeBeginAarName = ["com.jakewharton","com.nineoldandroids","com.afollestad","com.github","com.jakewharton","commons-io","com.nostra13.universalimageloader","com.alibaba:fastjson","com.github.bumptech.glide","log4j:log4j","io.reactivex:rxjava","com.fasterxml.jackson","com.squareup","org.","com.j256","com.facebook","com.google.android","androidx"]
						excludeBeginClassSampleName = []
						excludeContainClassPath = ["com/jakewharton","com/nineoldandroids","com/afollestad","com/github","com/jakewharton","commons-io","com/nostra13/universalimageloader","com/alibaba/fastjson","com/github/bumptech/glide","com.fasterxml.jackson","com/squareup","org/","com/j256","com/facebook","log4j/","io.reactivex/rxjava","android/databinding","com/handmark/pulltorefresh","com/iflytek","com/amap/api","com/airbnb/lottie","pl/droidsonroids/gif"]
						lookupMethod = ["invokevirtual\tcom.nd.smartcan.permission.FuncsNeedPermision.call","invokevirtual\tcom.nd.smartcan.permission.FuncsNeedPermision.dial","invokevirtual\tcom.nd.smartcan.commons.util.system.dial","invokevirtual\tcom.nd.smartcan.commons.util.system.call","invokevirtual\tcom.nd.component.MainContainerActivityHelper.requestPermission","invokevirtual\tcom.nd.smartcan.appfactory.script.webkit.WebViewActivity","invokevirtual\tcom.nd.smartcan.appfactory.AppFactory.addReactPackage","invokevirtual\tcom.nd.smartcan.appfactory.AppFactory.addReactViewManagerCreator","invokestatic\tcom.nd.smartcan.commons.util.helper.Tools.calculateUniqueDeviceId","invokestatic\tcom.nd.smartcan.commons.util.helper.Tools.getPhoneIMEIorESN","invokestatic\tcom.nd.smartcan.commons.util.security.AES.encrypt","invokestatic\tcom.nd.smartcan.commons.util.security.AES.decrypt","invokestatic\tcom.nd.smartcan.datalayer.tools.SdkEnvironment.getUUID","invokestatic\tcom.nd.smartcan.commons.util.helper.Tools.getUniqueIdentification","invokestatic\tcom.nd.smartcan.commons.util.system.getUniqueIdentification","invokestatic\tcom.nd.smartcan.commons.util.system.getUniqueIdHaveMd5","invokestatic\tcom.nd.android.smartcan.network.util.HttpsConnectionHelper.getAllHostsValidVerifier"]
					}
            

try {
    def extc = Class.forName("com.zen.plugin.lib.analysis.ext.LibraryAnalysisExtension")
    if (extc) {
        // 中小学专用依赖库更新脚本
        libReport {
            upgradeUrl = "http://git.sdp.nd/mobile/commons/-/raw/master/upgradle_lib_zxx.gradle"
        }
    }
} catch (e) {
}
            
